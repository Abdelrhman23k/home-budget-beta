import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection, getDocs, deleteDoc, addDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

document.addEventListener('DOMContentLoaded', () => {
    // --- State and Constants ---
    let currentBudget = null, userId = null, isAuthReady = false, unsubscribeBudget = null;
    let editingCategoryId = null, editingTransactionId = null, editingIncomeId = null;
    let recognition = null, lastAddedItemId = null;
    let transactionPieChart = null, needsWantsChart = null, historicalSavingsChart = null, categoryDeepDiveChart = null;
    let activeBudgetId = null, allBudgets = {};
    let dom = {};

    const CONSTANTS = {
        MODAL_IDS: {
            category: 'categoryModalOverlay',
            transaction: 'transactionModalOverlay',
            income: 'incomeModalOverlay',
            archivedDetails: 'archivedMonthDetailsModalOverlay',
            confirm: 'confirmModalOverlay',
            manageItems: 'manageItemsModalOverlay',
            manageSubcategories: 'manageSubcategoriesModalOverlay'
        }
    };
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { apiKey: "AIzaSyAnDwriW_zqBkZDrdLcDrg82f5_UoJzeUE", authDomain: "home-budget-app-c4f05.firebaseapp.com", projectId: "home-budget-app-c4f05" };
    
    const defaultCategoryIcon = `<svg class="category-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.432 0l6.568-6.568a2.426 2.426 0 0 0 0-3.432L12.586 2.586z"/><circle cx="7.5" cy="7.5" r=".5" fill="currentColor"/></svg>`;
    const defaultBudget = {
        name: "Default Budget",
        types: ['Needs', 'Wants', 'Savings'],
        paymentMethods: ['Cash', 'Credit Card', 'Bank Transfer'],
        subcategories: { 'Coffee': ['diningOut', 'groceries'], 'Internet': ['utilities'], 'Pet Food': ['dogEssentials'] },
        categories: [ { id: 'groceries', name: 'Groceries', allocated: 6000, spent: 0, type: 'Needs', color: '#EF4444', icon: `<svg class="category-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="8" cy="21" r="1"/><circle cx="19" cy="21" r="1"/><path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.16"/></svg>` }, { id: 'utilities', name: 'Utilities', allocated: 1500, spent: 0, type: 'Needs', color: '#F97316', icon: `<svg class="category-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"/><path d="m13 10-3 5h4l-3 5"/></svg>` }, { id: 'savings', name: 'Savings', allocated: 4000, spent: 0, type: 'Savings', color: '#A855F7', icon: `<svg class="category-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"/><path d="M8 12h7"/><path d="M12 7v10"/></svg>` }, ],
        transactions: [],
        incomeTransactions: []
    };
    const categoryMapping = { "groceries": ["groceries", "grocery"], "utilities": ["utilities", "bills"], "savings": ["savings"] };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add('is-visible'); observer.unobserve(entry.target); } }); }, { threshold: 0.1 });

    function showNotification(message, type = 'info', duration = 3000) { const el = document.getElementById('inlineNotification'); el.textContent = message; el.className = 'hidden'; void el.offsetWidth; el.classList.add(type, 'show'); setTimeout(() => { el.classList.remove('show'); setTimeout(() => el.classList.add('hidden'), 300); }, duration); }
    function showModal(id) { document.getElementById(id).classList.remove('hidden'); }
    function hideModal(id) { document.getElementById(id).classList.add('hidden'); }
    async function showConfirmModal(title, message) { const modalId = CONSTANTS.MODAL_IDS.confirm; const modal = document.getElementById(modalId); modal.innerHTML = `<div class="custom-modal-content"><h2 class="custom-modal-title">${title}</h2><p class="text-center text-gray-600 mb-6">${message}</p><div class="custom-modal-buttons justify-center"><button class="custom-modal-button custom-modal-cancel">Cancel</button><button class="custom-modal-button custom-modal-confirm">Confirm</button></div></div>`; showModal(modalId); return new Promise(resolve => { modal.querySelector('.custom-modal-confirm').onclick = () => { hideModal(modalId); resolve(true); }; modal.querySelector('.custom-modal-cancel').onclick = () => { hideModal(modalId); resolve(false); }; }); }

    function initializeDOMCache() {
        dom = {
            loadingSpinner: document.getElementById('loadingSpinner'),
            mainContent: document.getElementById('mainContent'),
            userIdDisplay: document.getElementById('userIdDisplay'),
            userIdValue: document.getElementById('userIdValue'),
            voiceFab: document.getElementById('voiceFab'),
            tabs: document.querySelectorAll('.tab-button'),
            tabPanels: document.querySelectorAll('.tab-panel'),
            budgetControlPanel: document.getElementById('budgetControlPanel'),
            budgetSelector: document.getElementById('budgetSelector'),
            mainFab: document.getElementById('mainFab'),
            fabContainer: document.querySelector('.fab-container')
        };
    }

    onAuthStateChanged(auth, async (user) => {
        if (user) {
            initializeDOMCache();
            userId = user.uid;
            isAuthReady = true;
            dom.userIdValue.textContent = userId;
            dom.userIdDisplay.classList.remove('hidden');
            initializeEventListeners();
            await initializeAppState();
            setupSpeechRecognition();
        } else {
            try {
                const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                if (initialAuthToken) await signInWithCustomToken(auth, initialAuthToken);
                else await signInAnonymously(auth);
            } catch (error) {
                console.error("Authentication failed:", error);
                showNotification("Critical Error: Could not connect. Please refresh.", "danger", 10000);
            }
        }
    });

    async function initializeAppState() {
        dom.mainContent.classList.add('hidden');
        dom.budgetControlPanel.classList.add('hidden');
        dom.loadingSpinner.classList.remove('hidden');
        try {
            await migrateOldBudgetStructure();
            const budgetsColRef = collection(db, `artifacts/${appId}/users/${userId}/budgets`);
            const budgetsSnapshot = await getDocs(budgetsColRef);
            allBudgets = {};
            budgetsSnapshot.forEach(doc => { allBudgets[doc.id] = doc.data().name || "Untitled Budget"; });
            if (Object.keys(allBudgets).length === 0) {
                activeBudgetId = await createNewBudget("My First Budget");
            } else {
                const prefsDocRef = doc(db, `artifacts/${appId}/users/${userId}/preferences/userPrefs`);
                const prefsDoc = await getDoc(prefsDocRef);
                if (prefsDoc.exists() && allBudgets[prefsDoc.data().activeBudgetId]) {
                    activeBudgetId = prefsDoc.data().activeBudgetId;
                } else {
                    activeBudgetId = Object.keys(allBudgets)[0];
                }
            }
            populateBudgetSelector();
            await setupBudgetListener(activeBudgetId);
            dom.budgetControlPanel.classList.remove('hidden');
        } catch (error) {
            console.error("Failed to initialize app state:", error);
            showNotification("A critical error occurred while loading your budget. Please refresh.", "danger", 10000);
            dom.loadingSpinner.classList.add('hidden');
        }
    }

    async function migrateOldBudgetStructure() {
        const oldBudgetRef = doc(db, `artifacts/${appId}/users/${userId}/budget/current`);
        const budgetsColRef = collection(db, `artifacts/${appId}/users/${userId}/budgets`);
        try {
            const oldBudgetSnap = await getDoc(oldBudgetRef);
            const budgetsSnapshot = await getDocs(budgetsColRef);
            if (oldBudgetSnap.exists() && budgetsSnapshot.empty) {
                showNotification("Updating account to support new features...", "info");
                const oldBudgetData = oldBudgetSnap.data();
                oldBudgetData.name = "Default Budget";
                if (oldBudgetData.income && !oldBudgetData.incomeTransactions) {
                    oldBudgetData.incomeTransactions = [{ id: 'income-migrated-' + Date.now(), amount: oldBudgetData.income, description: 'Initial Budgeted Income', date: new Date().toISOString().slice(0, 10) }];
                }
                delete oldBudgetData.income;
                if (!oldBudgetData.transactions) oldBudgetData.transactions = [];
                const newBudgetRef = await addDoc(budgetsColRef, oldBudgetData);
                await setActiveBudgetId(newBudgetRef.id);
                await deleteDoc(oldBudgetRef);
                showNotification("Account update complete!", "success");
            }
        } catch (error) {
            console.error("Migration failed: ", error);
            showNotification("Could not update account structure.", "danger");
        }
    }

    async function setupBudgetListener(budgetId) {
        if (unsubscribeBudget) unsubscribeBudget();
        const budgetDocRef = doc(db, `artifacts/${appId}/users/${userId}/budgets/${budgetId}`);
        return new Promise((resolve, reject) => {
            unsubscribeBudget = onSnapshot(budgetDocRef, (docSnap) => {
                try {
                    if (docSnap.exists()) {
                        currentBudget = docSnap.data();
                        if (!currentBudget.transactions) currentBudget.transactions = [];
                        if (!currentBudget.incomeTransactions) currentBudget.incomeTransactions = [];
                        if (!currentBudget.types) currentBudget.types = defaultBudget.types;
                        dom.loadingSpinner.classList.add('hidden');
                        dom.mainContent.classList.remove('hidden');
                        renderUI();
                        resolve();
                    } else {
                        reject(new Error(`Budget with ID ${budgetId} not found.`));
                    }
                } catch(error) {
                    console.error("Error rendering UI from snapshot:", error);
                    showNotification("An error occurred displaying the budget.", "danger");
                    reject(error);
                }
            }, (error) => {
                console.error(`Error listening to budget ${budgetId}:`, error);
                showNotification("Connection to data lost. Please refresh.", "danger");
                reject(error);
            });
        });
    }

    async function saveBudget() { if (!isAuthReady || !userId || !currentBudget || !activeBudgetId) return; lastAddedItemId = null; const budgetDocRef = doc(db, `artifacts/${appId}/users/${userId}/budgets/${activeBudgetId}`); try { await setDoc(budgetDocRef, currentBudget, { merge: true }); } catch (error) { console.error("Error saving budget:", error); showNotification("Error: Could not save changes.", "danger"); } }
    function populateBudgetSelector() { dom.budgetSelector.innerHTML = ''; for (const id in allBudgets) { const option = document.createElement('option'); option.value = id; option.textContent = allBudgets[id]; dom.budgetSelector.appendChild(option); } if (activeBudgetId) { dom.budgetSelector.value = activeBudgetId; } document.getElementById('deleteBudgetButton').disabled = Object.keys(allBudgets).length <= 1; }
    async function setActiveBudgetId(budgetId) { activeBudgetId = budgetId; const prefsDocRef = doc(db, `artifacts/${appId}/users/${userId}/preferences/userPrefs`); try { await setDoc(prefsDocRef, { activeBudgetId: budgetId }); } catch (error) { console.error("Could not save preference:", error); } }
    async function handleBudgetSwitch() { const newBudgetId = dom.budgetSelector.value; if (newBudgetId === activeBudgetId) return; dom.mainContent.classList.add('hidden'); dom.loadingSpinner.classList.remove('hidden'); await setActiveBudgetId(newBudgetId); await setupBudgetListener(newBudgetId); }
    async function createNewBudget(name) { const newBudgetData = JSON.parse(JSON.stringify(defaultBudget)); newBudgetData.name = name; const budgetsColRef = collection(db, `artifacts/${appId}/users/${userId}/budgets`); try { const docRef = await addDoc(budgetsColRef, newBudgetData); allBudgets[docRef.id] = name; populateBudgetSelector(); showNotification(`Budget "${name}" created.`, 'success'); return docRef.id; } catch (error) { console.error("Error creating budget:", error); showNotification("Could not create budget.", "danger"); return null; } }
    async function deleteCurrentBudget() { if (Object.keys(allBudgets).length <= 1) { showNotification("Cannot delete your only budget.", "danger"); return; } const budgetNameToDelete = allBudgets[activeBudgetId]; const confirmed = await showConfirmModal(`Delete "${budgetNameToDelete}"?`, "This is permanent and will delete all data for this budget."); if (confirmed) { const budgetToDelRef = doc(db, `artifacts/${appId}/users/${userId}/budgets/${activeBudgetId}`); const idToDelete = activeBudgetId; delete allBudgets[idToDelete]; const newActiveId = Object.keys(allBudgets)[0]; try { await deleteDoc(budgetToDelRef); showNotification(`Budget "${budgetNameToDelete}" deleted.`, "success"); dom.budgetSelector.value = newActiveId; await handleBudgetSwitch(); populateBudgetSelector(); } catch (error) { console.error("Error deleting budget:", error); showNotification("Failed to delete budget.", "danger"); allBudgets[idToDelete] = budgetNameToDelete; } } }
    
    function calculateTotalIncome() { return (currentBudget.incomeTransactions || []).reduce((sum, t) => sum + (t.amount || 0), 0); }
    function renderUI() { if (!currentBudget) return; renderSummary(); renderCategories(); populateTransactionFilters(); renderTransactionList(); renderHistoryList(); renderInsights(); }
    function renderSummary() { const totalIncome = calculateTotalIncome(); const totalSpent = (currentBudget.categories || []).reduce((sum, cat) => sum + (cat.spent || 0), 0); const netFlow = totalIncome - totalSpent; const spentPercentage = totalIncome > 0 ? (totalSpent / totalIncome) * 100 : 0; document.getElementById('totalBudgetValue').textContent = totalIncome.toFixed(2); document.getElementById('totalSpentValue').textContent = totalSpent.toFixed(2); const remainingEl = document.getElementById('overallRemainingValue'); remainingEl.textContent = netFlow.toFixed(2); remainingEl.className = `font-bold ${netFlow < 0 ? 'text-red-600' : 'text-green-600'}`; const overallProgressBar = document.getElementById('overallProgressBar'); if(overallProgressBar && overallProgressBar.parentElement) { requestAnimationFrame(() => { overallProgressBar.parentElement.style.transform = 'scaleX(1)'; overallProgressBar.style.width = `${Math.min(100, spentPercentage)}%`; }); } }
    function renderCategories() { const container = document.getElementById('categoryDetailsContainer'); if (!container) return; container.innerHTML = ''; const types = currentBudget.types || []; const categories = currentBudget.categories || []; types.forEach(type => { const categoriesOfType = categories.filter(c => c.type === type); if (categoriesOfType.length === 0) return; const section = document.createElement('div'); section.className = 'mb-6'; const title = document.createElement('h3'); title.className = 'text-xl sm:text-2xl font-bold text-gray-800 mb-4 pl-1 will-animate'; title.textContent = type; section.appendChild(title); observer.observe(title); const grid = document.createElement('div'); grid.className = 'grid grid-cols-1 md:grid-cols-2 gap-4'; section.appendChild(grid); categoriesOfType.forEach((category, index) => { const card = createCategoryCard(category); card.classList.add('will-animate'); card.style.transitionDelay = `${index * 50}ms`; grid.appendChild(card); observer.observe(card); }); container.appendChild(section); }); attachCategoryEventListeners(); updateTransactionCategoryDropdown(); }
    function createCategoryCard(category) { const card = document.createElement('div'); const spent = category.spent || 0; const allocated = category.allocated || 0; const remaining = allocated - spent; const percentage = allocated > 0 ? (spent / allocated) * 100 : 0; card.className = 'category-card'; card.style.borderColor = category.color || '#cccccc'; card.dataset.categoryId = category.id; card.innerHTML = `<div class="flex justify-between items-start w-full"><div class="flex items-center gap-2">${category.icon || defaultCategoryIcon}<h4 class="font-bold text-base sm:text-lg text-gray-900">${category.name}</h4></div><div class="flex gap-2"><button data-edit-id="${category.id}" class="edit-category-btn p-1 text-gray-400 hover:text-blue-600 transition-colors"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/></svg></button><button data-delete-id="${category.id}" class="delete-category-btn p-1 text-gray-400 hover:text-red-600 transition-colors"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg></button></div></div><div class="w-full"><p class="text-sm text-gray-500"><span class="font-semibold text-gray-700">${spent.toFixed(2)}</span> / ${allocated.toFixed(2)} EGP</p><div class="progress-bar-container"><div class="progress-bar-fill" style="width: ${Math.min(100, percentage)}%; background-color: ${category.color || '#cccccc'};"></div></div><p class="text-right text-xs sm:text-sm mt-1 font-medium ${remaining < 0 ? 'text-red-500' : 'text-gray-600'}">${remaining.toFixed(2)} EGP remaining</p></div>`; const progressBarContainer = card.querySelector('.progress-bar-container'); if(progressBarContainer){ requestAnimationFrame(() => { progressBarContainer.style.transform = 'scaleX(1)'; }); } return card; }
    function attachCategoryEventListeners() { document.getElementById('categoryDetailsContainer')?.addEventListener('click', (e) => { const card = e.target.closest('.category-card'); if (!card) return; if (e.target.closest('.edit-category-btn')) { e.stopPropagation(); editingCategoryId = card.dataset.categoryId; const category = currentBudget.categories.find(c => c.id === editingCategoryId); if (category) openCategoryModal(category); } else if (e.target.closest('.delete-category-btn')) { e.stopPropagation(); const categoryIdToDelete = card.dataset.categoryId; handleDeleteCategory(categoryIdToDelete); } else { dom.tabs.forEach(b => b.classList.toggle('active', b.dataset.tab === 'transactions')); dom.tabPanels.forEach(p => p.classList.toggle('active', p.id === 'tab-transactions')); document.getElementById('filterCategory').value = card.dataset.categoryId; renderTransactionList(); } }); }
    function updateTransactionCategoryDropdown() { const categorySelect = document.getElementById('modalTransactionCategory'); if(categorySelect) { const currentValue = categorySelect.value; categorySelect.innerHTML = '<option value="">Select Category</option>'; (currentBudget.categories || []).forEach(cat => { const option = document.createElement('option'); option.value = cat.id; option.textContent = cat.name; categorySelect.appendChild(option); }); categorySelect.value = currentValue; } }
    async function handleDeleteCategory(categoryId) { const category = currentBudget.categories.find(c => c.id === categoryId); if (!category) return; const confirmed = await showConfirmModal('Delete Category?', `This will also delete all associated transactions.`); if (confirmed) { currentBudget.categories = currentBudget.categories.filter(c => c.id !== categoryId); currentBudget.transactions = (currentBudget.transactions || []).filter(t => t.categoryId !== categoryId); recalculateSpentAmounts(); await saveBudget(); showNotification(`Category "${category.name}" deleted.`, 'success'); } }
    function openCategoryModal(category = null) { editingCategoryId = category ? category.id : null; const modalId = CONSTANTS.MODAL_IDS.category; const modal = document.getElementById(modalId); let typeOptions = ''; (currentBudget.types || []).forEach(type => { const selected = category && category.type === type ? 'selected' : ''; typeOptions += `<option value="${type}" ${selected}>${type}</option>`; }); modal.innerHTML = `<div class="custom-modal-content"><h2 class="custom-modal-title">${category ? 'Edit Category' : 'Add New Category'}</h2><form id="categoryForm"><div class="mb-4"><label for="modalCategoryName" class="block text-gray-700 text-sm font-bold mb-2">Category Name:</label><input type="text" id="modalCategoryName" class="form-input" value="${category ? category.name : ''}" required /></div><div class="mb-4"><label for="modalAllocatedAmount" class="block text-gray-700 text-sm font-bold mb-2">Allocated Amount (EGP):</label><input type="number" id="modalAllocatedAmount" class="form-input" min="0" step="0.01" value="${category ? category.allocated : ''}" required /></div><div class="mb-6"><label for="modalCategoryType" class="block text-gray-700 text-sm font-bold mb-2">Category Type:</label><select id="modalCategoryType" class="form-input">${typeOptions}</select></div><div class="custom-modal-buttons"><button type="button" class="custom-modal-button custom-modal-cancel">Cancel</button><button type="submit" class="custom-modal-button custom-modal-primary-button">${category ? 'Save Changes' : 'Add Category'}</button></div></form></div>`; showModal(modalId); modal.querySelector('form').onsubmit = handleCategoryFormSubmit; modal.querySelector('.custom-modal-cancel').onclick = () => hideModal(modalId); }
    async function handleCategoryFormSubmit(e) { e.preventDefault(); const name = document.getElementById('modalCategoryName').value; const allocated = parseFloat(document.getElementById('modalAllocatedAmount').value); const type = document.getElementById('modalCategoryType').value; if (editingCategoryId) { const category = currentBudget.categories.find(c => c.id === editingCategoryId); if (category) { category.name = name; category.allocated = allocated; category.type = type; } } else { if (!currentBudget.categories) currentBudget.categories = []; currentBudget.categories.push({ id: name.toLowerCase().replace(/\s+/g, '-') + '-' + Date.now(), name, allocated, spent: 0, type, color: `#${(Math.random()*0xFFFFFF<<0).toString(16).padStart(6,'0')}`, icon: defaultCategoryIcon }); } await saveBudget(); hideModal(CONSTANTS.MODAL_IDS.category); editingCategoryId = null; showNotification(`Category saved successfully.`, 'success'); }
    function openTransactionModal(transaction = null) { editingTransactionId = transaction ? transaction.id : null; const modalId = CONSTANTS.MODAL_IDS.transaction; const modal = document.getElementById(modalId); let paymentMethodOptions = ''; (currentBudget.paymentMethods || []).forEach(pm => { const selected = transaction && transaction.paymentMethod === pm ? 'selected' : ''; paymentMethodOptions += `<option value="${pm}" ${selected}>${pm}</option>`; }); let subcategoryOptions = '<option value="">None</option>'; modal.innerHTML = `<div class="custom-modal-content"><h2 class="custom-modal-title">${transaction ? 'Edit Expense' : 'Add New Expense'}</h2><form id="transactionForm"><div class="mb-4"><label for="modalTransactionAmount" class="block text-gray-700 text-sm font-bold mb-2">Amount (EGP):</label><input type="number" id="modalTransactionAmount" class="form-input" min="0" step="0.01" value="${transaction ? transaction.amount : ''}" required /></div><div class="mb-4"><label for="modalTransactionCategory" class="block text-gray-700 text-sm font-bold mb-2">Category:</label><select id="modalTransactionCategory" class="form-input" required></select></div><div class="mb-4"><label for="modalTransactionSubcategory" class="block text-gray-700 text-sm font-bold mb-2">Subcategory (Optional):</label><select id="modalTransactionSubcategory" class="form-input">${subcategoryOptions}</select></div><div class="mb-4"><label for="modalTransactionPaymentMethod" class="block text-gray-700 text-sm font-bold mb-2">Payment Method:</label><select id="modalTransactionPaymentMethod" class="form-input" required>${paymentMethodOptions}</select></div><div class="mb-4"><label for="modalTransactionDescription" class="block text-gray-700 text-sm font-bold mb-2">Description (Optional):</label><input type="text" id="modalTransactionDescription" class="form-input" value="${transaction ? transaction.description : ''}" /></div><div class="mb-6"><label for="modalTransactionDate" class="block text-gray-700 text-sm font-bold mb-2">Date & Time:</label><input type="datetime-local" id="modalTransactionDate" class="form-input" value="${transaction ? transaction.date : new Date().toISOString().slice(0, 16)}" required /></div><div class="custom-modal-buttons"><button type="button" class="custom-modal-button custom-modal-cancel">Cancel</button><button type="submit" class="custom-modal-button custom-modal-primary-button">${transaction ? 'Save Changes' : 'Add Expense'}</button></div></form></div>`; updateTransactionCategoryDropdown(); if(transaction) { document.getElementById('modalTransactionCategory').value = transaction.categoryId; updateSubcategoryDropdown(transaction.categoryId, transaction.subcategory); } showModal(modalId); modal.querySelector('form').onsubmit = handleTransactionFormSubmit; modal.querySelector('.custom-modal-cancel').onclick = () => hideModal(modalId); document.getElementById('modalTransactionCategory').onchange = (e) => updateSubcategoryDropdown(e.target.value); }
    async function handleTransactionFormSubmit(e) { e.preventDefault(); const newTransactionId = editingTransactionId || `trans-${Date.now()}`; const newTransaction = { id: newTransactionId, amount: parseFloat(document.getElementById('modalTransactionAmount').value), categoryId: document.getElementById('modalTransactionCategory').value, subcategory: document.getElementById('modalTransactionSubcategory').value, paymentMethod: document.getElementById('modalTransactionPaymentMethod').value, description: document.getElementById('modalTransactionDescription').value, date: document.getElementById('modalTransactionDate').value, }; if (!currentBudget.transactions) currentBudget.transactions = []; if (editingTransactionId) { const index = currentBudget.transactions.findIndex(t => t.id === editingTransactionId); if (index > -1) currentBudget.transactions[index] = newTransaction; } else { currentBudget.transactions.push(newTransaction); lastAddedItemId = newTransactionId; } recalculateSpentAmounts(); await saveBudget(); hideModal(CONSTANTS.MODAL_IDS.transaction); editingTransactionId = null; showNotification('Expense saved.', 'success'); }
    function openIncomeModal(income = null) { editingIncomeId = income ? income.id : null; const modal = document.getElementById('incomeModalOverlay'); modal.innerHTML = `<div class="custom-modal-content"><h2 class="custom-modal-title">${income ? 'Edit Income' : 'Add New Income'}</h2><form id="incomeForm"><div class="mb-4"><label for="modalIncomeAmount" class="block text-gray-700 text-sm font-bold mb-2">Amount (EGP):</label><input type="number" id="modalIncomeAmount" class="form-input" min="0" step="0.01" value="${income ? income.amount : ''}" required /></div><div class="mb-4"><label for="modalIncomeDescription" class="block text-gray-700 text-sm font-bold mb-2">Description (e.g., Salary):</label><input type="text" id="modalIncomeDescription" class="form-input" value="${income ? income.description : ''}" required /></div><div class="mb-6"><label for="modalIncomeDate" class="block text-gray-700 text-sm font-bold mb-2">Date:</label><input type="date" id="modalIncomeDate" class="form-input" value="${income ? income.date : new Date().toISOString().slice(0, 10)}" required /></div><div class="custom-modal-buttons"><button type="button" class="custom-modal-button custom-modal-cancel">Cancel</button><button type="submit" class="custom-modal-button custom-modal-primary-button">${income ? 'Save Changes' : 'Add Income'}</button></div></form></div>`; showModal('incomeModalOverlay'); document.getElementById('incomeForm').onsubmit = handleIncomeFormSubmit; document.querySelector('#incomeModalOverlay .custom-modal-cancel').onclick = () => hideModal('incomeModalOverlay'); }
    async function handleIncomeFormSubmit(e) { e.preventDefault(); const newIncomeId = editingIncomeId || `income-${Date.now()}`; const newIncome = { id: newIncomeId, amount: parseFloat(document.getElementById('modalIncomeAmount').value), description: document.getElementById('modalIncomeDescription').value, date: document.getElementById('modalIncomeDate').value }; if (!currentBudget.incomeTransactions) currentBudget.incomeTransactions = []; if (editingIncomeId) { const index = currentBudget.incomeTransactions.findIndex(i => i.id === editingIncomeId); if (index > -1) currentBudget.incomeTransactions[index] = newIncome; } else { currentBudget.incomeTransactions.push(newIncome); lastAddedItemId = newIncomeId; } await saveBudget(); hideModal('incomeModalOverlay'); editingIncomeId = null; showNotification('Income saved.', 'success'); }
    function updateSubcategoryDropdown(categoryId, selectedSubcategory) { const subcategorySelect = document.getElementById('modalTransactionSubcategory'); subcategorySelect.innerHTML = '<option value="">None</option>'; if (categoryId && currentBudget.subcategories) { for(const sub in currentBudget.subcategories) { if (currentBudget.subcategories[sub].includes(categoryId)) { const option = document.createElement('option'); option.value = sub; option.textContent = sub; if (sub === selectedSubcategory) { option.selected = true; } subcategorySelect.appendChild(option); } } } }
    function recalculateSpentAmounts() { if (!currentBudget.categories) return; currentBudget.categories.forEach(cat => cat.spent = 0); (currentBudget.transactions || []).forEach(trans => { const category = currentBudget.categories.find(cat => cat.id === trans.categoryId); if (category) category.spent += trans.amount; }); }
    function formatTimestamp(isoString) { if (!isoString) return 'Invalid Date'; const date = new Date(isoString); const options = { month: 'short', day: 'numeric', year: 'numeric' }; return date.toLocaleDateString('en-US', options); }
    function renderTransactionList() { const listEl = document.getElementById('transactionList'); const allItems = [ ...(currentBudget.transactions || []).map(t => ({ ...t, type: 'expense' })), ...(currentBudget.incomeTransactions || []).map(t => ({ ...t, type: 'income' })) ].sort((a, b) => new Date(b.date) - new Date(a.date)); listEl.innerHTML = ''; if (allItems.length === 0) { listEl.innerHTML = '<p class="text-center text-gray-500 py-8">No transactions or income recorded yet.</p>'; return; } allItems.forEach(item => { const li = document.createElement('div'); li.className = `transaction-item ${item.type}`; li.dataset.id = item.id; li.dataset.type = item.type; let description = '', details = '', amount = '', buttons = ''; if (item.type === 'income') { description = item.description || 'Income'; details = formatTimestamp(item.date); amount = `+${(item.amount || 0).toFixed(2)} EGP`; buttons = `<button data-edit-id="${item.id}" class="edit-income-btn p-1 text-gray-400 hover:text-blue-600"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/></svg></button><button data-delete-id="${item.id}" class="delete-income-btn p-1 text-gray-400 hover:text-red-600"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg></button>`; } else { const category = currentBudget.categories.find(c => c.id === item.categoryId); description = item.description || category?.name || 'Expense'; details = `${category?.name || 'Uncategorized'}・${formatTimestamp(item.date)}`; amount = `-${(item.amount || 0).toFixed(2)} EGP`; buttons = `<button data-edit-id="${item.id}" class="edit-transaction-btn p-1 text-gray-400 hover:text-blue-600"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/></svg></button><button data-delete-id="${item.id}" class="delete-transaction-btn p-1 text-gray-400 hover:text-red-600"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg></button>`; } li.innerHTML = `<div class="flex-1"><p class="description">${description}</p><p class="details">${details}</p></div><div class="flex items-center gap-2"><span class="amount">${amount}</span>${buttons}</div>`; if (item.id === lastAddedItemId) { li.classList.add(item.type === 'income' ? 'flash-enter-income' : 'flash-enter-expense'); lastAddedItemId = null; } listEl.appendChild(li); }); }
    function populateTransactionFilters() { const filterCategory = document.getElementById('filterCategory'); const filterPaymentMethod = document.getElementById('filterPaymentMethod'); if (!filterCategory || !filterPaymentMethod) return; let currentCategoryValue = filterCategory.value; filterCategory.innerHTML = '<option value="all">All Categories</option>'; const validCategoryOptions = ['all']; (currentBudget.categories || []).forEach(cat => { const option = document.createElement('option'); option.value = cat.id; option.textContent = cat.name; filterCategory.appendChild(option); validCategoryOptions.push(cat.id); }); filterCategory.value = validCategoryOptions.includes(currentCategoryValue) ? currentCategoryValue : 'all'; let currentPaymentValue = filterPaymentMethod.value; filterPaymentMethod.innerHTML = '<option value="all">All Payment Methods</option>'; const validPaymentOptions = ['all']; (currentBudget.paymentMethods || []).forEach(pm => { const option = document.createElement('option'); option.value = pm; option.textContent = pm; filterPaymentMethod.appendChild(option); validPaymentOptions.push(pm); }); filterPaymentMethod.value = validPaymentOptions.includes(currentPaymentValue) ? currentPaymentValue : 'all'; }
    async function renderHistoryList() { const historyList = document.getElementById('monthlyHistoryList'); if (!historyList || !activeBudgetId) return; historyList.innerHTML = '<div class="spinner"></div>'; const archiveColRef = collection(db, `artifacts/${appId}/users/${userId}/budgets/${activeBudgetId}/archive`); try { const snapshot = await getDocs(archiveColRef); historyList.innerHTML = ''; if (snapshot.empty) { historyList.innerHTML = '<p class="text-gray-500 text-center">No archives found.</p>'; return; } snapshot.docs.sort((a, b) => b.id.localeCompare(a.id)).forEach(doc => { const monthItem = document.createElement('div'); monthItem.className = 'bg-white p-3 rounded-lg flex justify-between items-center shadow-sm'; monthItem.innerHTML = `<span class="font-semibold">${doc.id}</span> <button data-archive-id="${doc.id}" class="view-archive-btn btn bg-indigo-500 hover:bg-indigo-600 btn-sm py-1 px-3">View</button>`; historyList.appendChild(monthItem); }); } catch (error) { console.error("Error fetching archives:", error); historyList.innerHTML = '<p class="text-red-500 text-center">Could not load history.</p>'; showNotification("Failed to load budget history.", "danger"); } }
    function renderArchivedMonthDetails(archiveId, data) { const modalId = CONSTANTS.MODAL_IDS.archivedDetails; const modal = document.getElementById(modalId); modal.innerHTML = `<div class="custom-modal-content" style="max-width: 800px;"><h2 class="custom-modal-title">Details for ${archiveId}</h2><div id="archivedMonthContent" class="max-h-[70vh] overflow-y-auto pr-2"></div><div class="custom-modal-buttons justify-center"><button type="button" class="custom-modal-button custom-modal-cancel">Close</button></div></div>`; const contentEl = document.getElementById('archivedMonthContent'); const totalIncome = (data.incomeTransactions || []).reduce((sum, t) => sum + t.amount, 0); const totalSpent = (data.categories || []).reduce((sum, cat) => sum + (cat.spent || 0), 0); contentEl.innerHTML = `<div class="bg-indigo-50 p-4 rounded-lg mb-6"><h3 class="text-xl font-bold text-indigo-800 mb-2">Summary</h3><div class="grid grid-cols-2 gap-4 text-center"><div><p class="text-sm text-gray-600">Total Income</p><p class="font-bold text-lg">${totalIncome.toFixed(2)} EGP</p></div><div><p class="text-sm text-gray-600">Total Spent</p><p class="font-bold text-lg text-red-600">${totalSpent.toFixed(2)} EGP</p></div></div></div> <h3 class="text-xl font-bold text-gray-800 my-4">Transactions</h3><ul class="space-y-2">${[...(data.transactions || []), ...(data.incomeTransactions || [])].sort((a,b) => new Date(b.date) - new Date(a.date)).map(t => { return `<li class="flex justify-between items-center bg-gray-50 p-2 rounded-md"><div><p class="font-medium">${t.description || 'Transaction'}</p><p class="text-sm text-gray-500">${new Date(t.date).toLocaleDateString()}</p></div><span class="font-bold ${t.categoryId ? 'text-red-600' : 'text-green-600'}">${t.categoryId ? '-' : '+'}${t.amount.toFixed(2)} EGP</span></li>`; }).join('') || '<p>No transactions.</p>'}</ul>`; modal.querySelector('.custom-modal-cancel').onclick = () => hideModal(modalId); }
    function setupSpeechRecognition() { const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition; if (!SpeechRecognition) { dom.voiceFab.disabled = true; return; } recognition = new SpeechRecognition(); recognition.continuous = false; recognition.lang = 'en-US'; recognition.interimResults = false; recognition.maxAlternatives = 1; recognition.onstart = () => { dom.voiceFab.classList.add('listening'); showNotification("Listening...", "info"); }; recognition.onend = () => { dom.voiceFab.classList.remove('listening'); }; recognition.onerror = (event) => { console.error("Speech recognition error", event.error); let message = `Error: ${event.error}`; if (event.error === 'not-allowed' || event.error === 'service-not-allowed') { message = "Microphone permission denied."; } else if (event.error === 'no-speech') { message = "No speech was detected."; } showNotification(message, "danger"); }; recognition.onresult = (event) => { const transcript = event.results[0][0].transcript.toLowerCase(); processVoiceCommand(transcript); }; }
    function processVoiceCommand(transcript) { const numbers = transcript.match(/(\d+(\.\d+)?)/); if (!numbers) { showNotification("Could not detect an amount.", "danger"); return; } const amount = parseFloat(numbers[0]); let foundCategoryId = null; for (const categoryId in categoryMapping) { if (categoryMapping[categoryId].some(keyword => transcript.includes(keyword))) { foundCategoryId = categoryId; break; } } if (!foundCategoryId) { showNotification(`Could not detect a category for: "${transcript}"`, "danger"); return; } const newTransactionId = `trans-${Date.now()}`; const newTransaction = { id: newTransactionId, amount, categoryId: foundCategoryId, description: `Voice entry: "${transcript}"`, date: new Date().toISOString(), paymentMethod: 'Cash', subcategory: '' }; lastAddedItemId = newTransactionId; if (!currentBudget.transactions) currentBudget.transactions = []; currentBudget.transactions.push(newTransaction); recalculateSpentAmounts(); saveBudget(); const categoryName = currentBudget.categories.find(c => c.id === foundCategoryId)?.name || 'category'; showNotification(`Added ${amount.toFixed(2)} EGP to ${categoryName}.`, "success"); }
    function renderInsights() { renderNeedsWantsChart(); renderBudgetHotspots(); renderHistoricalCharts(); } 
    function renderNeedsWantsChart() { const container = document.getElementById('needsWantsChartContainer'); if (!container) return; const categories = currentBudget.categories || []; const totalSpent = categories.reduce((sum, cat) => sum + (cat.spent || 0), 0); if (totalSpent === 0) { container.innerHTML = `<p class="text-center text-gray-500 mt-8">No spending data for this month yet.</p>`; return; } const spendingByType = { 'Needs': 0, 'Wants': 0, 'Savings': 0 }; categories.forEach(cat => { if (spendingByType[cat.type] !== undefined) { spendingByType[cat.type] += (cat.spent || 0); } }); if (needsWantsChart) { needsWantsChart.destroy(); } container.innerHTML = `<canvas id="needsWantsChartCanvas"></canvas>`; const canvas = document.getElementById('needsWantsChartCanvas'); const ctx = canvas.getContext('2d'); needsWantsChart = new Chart(ctx, { type: 'doughnut', data: { labels: Object.keys(spendingByType), datasets: [{ label: 'Spending', data: Object.values(spendingByType), backgroundColor: ['#3B82F6', '#F59E0B', '#10B981'], borderColor: '#ffffff', borderWidth: 4, }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom' } } } }); }
    function renderBudgetHotspots() { const container = document.getElementById('budgetHotspotsList'); if (!container) return; const categories = (currentBudget.categories || []).filter(c => (c.allocated || 0) > 0).map(c => ({...c, percentage: ((c.spent || 0) / c.allocated) * 100 })).sort((a,b) => b.percentage - a.percentage).slice(0, 5); if (categories.length === 0) { container.innerHTML = `<p class="text-center text-gray-500">No categories with allocated budgets.</p>`; return; } container.innerHTML = categories.map(cat => { const color = cat.percentage > 100 ? 'bg-red-500' : (cat.percentage > 75 ? 'bg-yellow-500' : 'bg-blue-500'); return `<div class="hotspot-item"><div class="flex items-center gap-2"><span class="font-semibold text-sm">${cat.name}</span></div><div class="flex items-center gap-2"><span class="text-xs font-mono">${cat.percentage.toFixed(0)}%</span><div class="progress-bar-container w-24"><div class="progress-bar-fill ${color}" style="width: ${Math.min(100, cat.percentage)}%"></div></div></div></div>`; }).join(''); }
    async function renderHistoricalCharts() { const histContainer = document.getElementById('historicalSavingsChartContainer'); const deepDiveContainer = document.getElementById('categoryDeepDiveContainer'); const deepDiveSelect = document.getElementById('categoryDeepDiveSelect'); if (!histContainer || !deepDiveContainer || !deepDiveSelect) return; const archiveColRef = collection(db, `artifacts/${appId}/users/${userId}/budgets/${activeBudgetId}/archive`); const snapshot = await getDocs(archiveColRef); if (snapshot.docs.length < 2) { histContainer.innerHTML = `<p class="text-center text-gray-500 mt-8">Archive at least two months to see trends.</p>`; deepDiveContainer.innerHTML = `<p class="text-center text-gray-500 mt-8">Not enough data for a deep dive.</p>`; deepDiveSelect.innerHTML = ''; return; } const archives = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })).sort((a, b) => a.id.localeCompare(b.id)); const labels = archives.map(archive => archive.id); const totalSpentData = archives.map(archive => (archive.categories || []).reduce((sum, cat) => sum + (cat.spent || 0), 0)); const incomeData = archives.map(a => (a.incomeTransactions || []).reduce((sum, t) => sum + t.amount, 0)); const netSavingsData = incomeData.map((income, i) => income - totalSpentData[i]); if (historicalSavingsChart) historicalSavingsChart.destroy(); histContainer.innerHTML = `<canvas id="historicalSavingsChartCanvas"></canvas>`; const ctx = document.getElementById('historicalSavingsChartCanvas').getContext('2d'); historicalSavingsChart = new Chart(ctx, { type: 'line', data: { labels, datasets: [ { label: 'Total Spent', data: totalSpentData, borderColor: '#EF4444' }, { label: 'Total Income', data: incomeData, borderColor: '#22C55E', borderDash: [5, 5] }, { label: 'Net Savings', data: netSavingsData, borderColor: '#3B82F6', backgroundColor: 'rgba(59, 130, 246, 0.1)', fill: true, tension: 0.2 } ] }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } } }); const allCategoryNames = [...new Set(archives.flatMap(a => (a.categories || []).map(c => c.name)))]; deepDiveSelect.innerHTML = allCategoryNames.map(name => `<option value="${name}">${name}</option>`).join(''); const renderDeepDive = () => { const selectedCategory = deepDiveSelect.value; if (!selectedCategory) { deepDiveContainer.innerHTML = ''; return; } const categoryData = archives.map(archive => { const category = (archive.categories || []).find(c => c.name === selectedCategory); return category ? (category.spent || 0) : 0; }); if (categoryDeepDiveChart) categoryDeepDiveChart.destroy(); deepDiveContainer.innerHTML = `<canvas id="categoryDeepDiveCanvas"></canvas>`; const deepDiveCtx = document.getElementById('categoryDeepDiveCanvas').getContext('2d'); categoryDeepDiveChart = new Chart(deepDiveCtx, { type: 'bar', data: { labels, datasets: [{ label: `Spending for ${selectedCategory}`, data: categoryData, backgroundColor: '#8B5CF6' }] }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } } }); }; deepDiveSelect.onchange = renderDeepDive; renderDeepDive(); }
    async function handleDeleteTransaction(transactionId) { const confirmed = await showConfirmModal('Delete Transaction?', 'Are you sure you want to delete this transaction?'); if (confirmed) { currentBudget.transactions = currentBudget.transactions.filter(t => t.id !== transactionId); recalculateSpentAmounts(); await saveBudget(); showNotification('Transaction deleted.', 'success'); } }
    async function handleDeleteIncome(incomeId) { const confirmed = await showConfirmModal('Delete Income?', 'Are you sure you want to delete this income entry?'); if (confirmed) { currentBudget.incomeTransactions = currentBudget.incomeTransactions.filter(i => i.id !== incomeId); await saveBudget(); showNotification('Income deleted.', 'success'); } }
    
    function initializeEventListeners() {
        dom.tabs.forEach(button => button.addEventListener('click', () => { const tab = button.dataset.tab; dom.tabs.forEach(btn => btn.classList.remove('active')); button.classList.add('active'); dom.tabPanels.forEach(panel => panel.classList.toggle('active', panel.id === `tab-${tab}`)); }));
        dom.budgetSelector.addEventListener('change', handleBudgetSwitch);
        dom.mainFab.addEventListener('click', () => dom.fabContainer.classList.toggle('open'));
        document.getElementById('addBudgetButton').addEventListener('click', async () => { const name = prompt("Enter a name for the new budget:", "New Budget"); if (name) { const newId = await createNewBudget(name); if (newId) { dom.budgetSelector.value = newId; await handleBudgetSwitch(); } } });
        document.getElementById('deleteBudgetButton').addEventListener('click', deleteCurrentBudget);
        document.getElementById('addExpenseFab').onclick = () => { openTransactionModal(); dom.fabContainer.classList.remove('open'); };
        document.getElementById('addIncomeFab').onclick = () => { openIncomeModal(); dom.fabContainer.classList.remove('open'); };
        dom.voiceFab.onclick = () => { if (recognition) { try { recognition.start(); } catch (e) { console.error("Could not start recognition:", e); } }};
        document.getElementById('archiveMonthButton').onclick = async () => { const confirmed = await showConfirmModal('Archive Month?', 'This will save a snapshot and reset all transactions for the new month.'); if (confirmed) { const now = new Date(); const archiveId = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`; const archiveDocRef = doc(db, `artifacts/${appId}/users/${userId}/budgets/${activeBudgetId}/archive/${archiveId}`); try { await setDoc(archiveDocRef, currentBudget); currentBudget.transactions = []; currentBudget.incomeTransactions = []; currentBudget.categories.forEach(c => c.spent = 0); await saveBudget(); showNotification(`Budget for ${archiveId} has been archived.`, 'success'); } catch (error) { console.error("Error archiving month:", error); showNotification("Archiving failed.", "danger"); } } };
        document.getElementById('addCategoryModalButton').onclick = () => openCategoryModal();
        document.getElementById('manageTypesButton').onclick = () => openManagementModal({ title: "Manage Category Types", itemsKey: "types", placeholder: "New Type Name", onAdd: async (name) => { if(!currentBudget.types) currentBudget.types = []; currentBudget.types.push(name); await saveBudget(); }, onDelete: async (name) => { const categoriesUsingType = currentBudget.categories.filter(c => c.type === name); const confirmed = await showConfirmModal('Delete Type?', `This will also delete ${categoriesUsingType.length} associated categories and all their transactions.`); if (confirmed) { currentBudget.types = currentBudget.types.filter(t => t !== name); const categoryIdsToDelete = categoriesUsingType.map(c => c.id); currentBudget.categories = currentBudget.categories.filter(c => c.type !== name); currentBudget.transactions = currentBudget.transactions.filter(t => !categoryIdsToDelete.includes(t.categoryId)); await saveBudget(); } return confirmed; } });
        document.getElementById('managePaymentsButton').onclick = () => openManagementModal({ title: "Manage Payment Methods", itemsKey: "paymentMethods", placeholder: "New Payment Method", onAdd: async (name) => { if(!currentBudget.paymentMethods) currentBudget.paymentMethods = []; currentBudget.paymentMethods.push(name); await saveBudget(); }, onDelete: async (name) => { const confirmed = await showConfirmModal('Delete Payment Method?', `This will not affect existing transactions.`); if (confirmed) { currentBudget.paymentMethods = currentBudget.paymentMethods.filter(pm => pm !== name); await saveBudget(); } return confirmed; } });
        document.getElementById('manageSubcategoriesButton').onclick = () => { /* ... Functionality for this can be added here ... */ };
        document.getElementById('filterCategory').addEventListener('change', renderTransactionList);
        document.getElementById('filterPaymentMethod').addEventListener('change', renderTransactionList);
        document.getElementById('filterStartDate').addEventListener('change', renderTransactionList);
        document.getElementById('filterEndDate').addEventListener('change', renderTransactionList);
        document.getElementById('clearFiltersButton').onclick = () => { document.getElementById('filterCategory').value = 'all'; document.getElementById('filterPaymentMethod').value = 'all'; document.getElementById('filterStartDate').value = ''; document.getElementById('filterEndDate').value = ''; renderTransactionList(); };
        document.getElementById('transactionList').addEventListener('click', (e) => {
            const itemElement = e.target.closest('.transaction-item');
            if (!itemElement) return;
            const id = itemElement.dataset.id;
            const type = itemElement.dataset.type;

            if (e.target.closest('.edit-transaction-btn')) {
                const transaction = (currentBudget.transactions || []).find(t => t.id === id);
                if(transaction) openTransactionModal(transaction);
            } else if (e.target.closest('.delete-transaction-btn')) {
                handleDeleteTransaction(id);
            } else if (e.target.closest('.edit-income-btn')) {
                const income = (currentBudget.incomeTransactions || []).find(i => i.id === id);
                if(income) openIncomeModal(income);
            } else if (e.target.closest('.delete-income-btn')) {
                handleDeleteIncome(id);
            }
        });
        document.getElementById('monthlyHistoryList').addEventListener('click', async (e) => { const viewBtn = e.target.closest('.view-archive-btn'); if (viewBtn) { const archiveId = viewBtn.dataset.archiveId; const archiveDocRef = doc(db, `artifacts/${appId}/users/${userId}/budgets/${activeBudgetId}/archive/${archiveId}`); try { const docSnap = await getDoc(archiveDocRef); if (docSnap.exists()) { renderArchivedMonthDetails(archiveId, docSnap.data()); showModal(CONSTANTS.MODAL_IDS.archivedDetails); } else { showNotification("Could not find archive.", "danger"); } } catch (error) { console.error("Error fetching archive details:", error); showNotification("Failed to load archive details.", "danger"); } } });
    }
});
